// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: auth/owners.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OwnerControllerClient is the client API for OwnerController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OwnerControllerClient interface {
	CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteOwner(ctx context.Context, in *DeleteOwnerRequest, opts ...grpc.CallOption) (*Response, error)
	GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*Owner, error)
	LoginOwner(ctx context.Context, in *LoginOwnerRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type ownerControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOwnerControllerClient(cc grpc.ClientConnInterface) OwnerControllerClient {
	return &ownerControllerClient{cc}
}

func (c *ownerControllerClient) CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/auth.OwnerController/CreateOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerControllerClient) UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/auth.OwnerController/UpdateOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerControllerClient) DeleteOwner(ctx context.Context, in *DeleteOwnerRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/auth.OwnerController/DeleteOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerControllerClient) GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*Owner, error) {
	out := new(Owner)
	err := c.cc.Invoke(ctx, "/auth.OwnerController/GetOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerControllerClient) LoginOwner(ctx context.Context, in *LoginOwnerRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth.OwnerController/LoginOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OwnerControllerServer is the server API for OwnerController service.
// All implementations must embed UnimplementedOwnerControllerServer
// for forward compatibility
type OwnerControllerServer interface {
	CreateOwner(context.Context, *CreateOwnerRequest) (*Response, error)
	UpdateOwner(context.Context, *UpdateOwnerRequest) (*Response, error)
	DeleteOwner(context.Context, *DeleteOwnerRequest) (*Response, error)
	GetOwner(context.Context, *GetOwnerRequest) (*Owner, error)
	LoginOwner(context.Context, *LoginOwnerRequest) (*LoginResponse, error)
	mustEmbedUnimplementedOwnerControllerServer()
}

// UnimplementedOwnerControllerServer must be embedded to have forward compatible implementations.
type UnimplementedOwnerControllerServer struct {
}

func (UnimplementedOwnerControllerServer) CreateOwner(context.Context, *CreateOwnerRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwner not implemented")
}
func (UnimplementedOwnerControllerServer) UpdateOwner(context.Context, *UpdateOwnerRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (UnimplementedOwnerControllerServer) DeleteOwner(context.Context, *DeleteOwnerRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOwner not implemented")
}
func (UnimplementedOwnerControllerServer) GetOwner(context.Context, *GetOwnerRequest) (*Owner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwner not implemented")
}
func (UnimplementedOwnerControllerServer) LoginOwner(context.Context, *LoginOwnerRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOwner not implemented")
}
func (UnimplementedOwnerControllerServer) mustEmbedUnimplementedOwnerControllerServer() {}

// UnsafeOwnerControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OwnerControllerServer will
// result in compilation errors.
type UnsafeOwnerControllerServer interface {
	mustEmbedUnimplementedOwnerControllerServer()
}

func RegisterOwnerControllerServer(s grpc.ServiceRegistrar, srv OwnerControllerServer) {
	s.RegisterService(&OwnerController_ServiceDesc, srv)
}

func _OwnerController_CreateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerControllerServer).CreateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OwnerController/CreateOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerControllerServer).CreateOwner(ctx, req.(*CreateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnerController_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerControllerServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OwnerController/UpdateOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerControllerServer).UpdateOwner(ctx, req.(*UpdateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnerController_DeleteOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerControllerServer).DeleteOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OwnerController/DeleteOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerControllerServer).DeleteOwner(ctx, req.(*DeleteOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnerController_GetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerControllerServer).GetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OwnerController/GetOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerControllerServer).GetOwner(ctx, req.(*GetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnerController_LoginOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerControllerServer).LoginOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OwnerController/LoginOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerControllerServer).LoginOwner(ctx, req.(*LoginOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OwnerController_ServiceDesc is the grpc.ServiceDesc for OwnerController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OwnerController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.OwnerController",
	HandlerType: (*OwnerControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOwner",
			Handler:    _OwnerController_CreateOwner_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _OwnerController_UpdateOwner_Handler,
		},
		{
			MethodName: "DeleteOwner",
			Handler:    _OwnerController_DeleteOwner_Handler,
		},
		{
			MethodName: "GetOwner",
			Handler:    _OwnerController_GetOwner_Handler,
		},
		{
			MethodName: "LoginOwner",
			Handler:    _OwnerController_LoginOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/owners.proto",
}
